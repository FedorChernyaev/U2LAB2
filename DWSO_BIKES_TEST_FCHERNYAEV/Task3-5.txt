        
VARIABLE n_all_data NUMBER;
VARIABLE n_customer NUMBER;
VARIABLE n_brand NUMBER;
VARIABLE n_summary NUMBER;
BEGIN
 :n_all_data := 0; 
 :n_customer := 2; 
 :n_brand  := 0;
 :n_summary  := 4; 
END;

--Task 3
               
select s.EVENT_DT,
decode(GROUPING(s.CUSTOMER_ID),1,'ALL CUSTOMERS',s.CUSTOMER_ID) CUST_ID,
s.QUANTITY,
decode(GROUPING(b.BRAND_NAME),1,'ALL BRANDS',b.BRAND_NAME) BRAND,
b.MODEL_NAME,
s.TOTAL_PRICE
from SA_SALES.SA_SALES s, SA_BIKES.SA_BIKES b
where s.BIKE_ID = b.BIKE_ID 
group by s.EVENT_DT,s.QUANTITY , s.TOTAL_PRICE, b.MODEL_NAME, cube(b.BRAND_NAME,s.CUSTOMER_ID)  
HAVING GROUPING_ID(s.CUSTOMER_ID,b.BRAND_NAME)+1 IN(:n_all_data,:n_customer,:n_brand,:n_summary)
ORDER BY s.EVENT_DT,s.CUSTOMER_ID, b.BRAND_NAME;

--Task 4

select EXTRACT(MONTH FROM s.EVENT_DT) month,
decode(GROUPING(s.CUSTOMER_ID),1,'ALL CUSTOMERS',s.CUSTOMER_ID) CUST_ID,
s.QUANTITY,
decode(GROUPING(b.BRAND_NAME),1,'ALL BRANDS',b.BRAND_NAME) BRAND,
b.MODEL_NAME,
s.TOTAL_PRICE
from SA_SALES.SA_SALES s, SA_BIKES.SA_BIKES b
where s.BIKE_ID = b.BIKE_ID 
group by  EXTRACT(MONTH FROM s.EVENT_DT),s.QUANTITY , s.TOTAL_PRICE, b.MODEL_NAME,ROLLUP(b.BRAND_NAME,s.CUSTOMER_ID)  
HAVING GROUPING_ID(s.CUSTOMER_ID,b.BRAND_NAME)+1 IN(:n_all_data,:n_customer,:n_brand,:n_summary)
ORDER BY  EXTRACT(MONTH FROM s.EVENT_DT);

--Task 5

CREATE OR REPLACE FUNCTION getQuarter(dta date)
  RETURN NUMBER
  IS
     res CHAR;
  BEGIN
   SELECT TO_CHAR(dta, 'Q') INTO res
   FROM DUAL ;
    RETURN res;
  END;
  /
COMMIT;

select EXTRACT(DAY FROM s.EVENT_DT) day,
EXTRACT(MONTH FROM s.EVENT_DT) month,
getQuarter(s.EVENT_DT) quarter,
EXTRACT(YEAR FROM s.EVENT_DT) year,
decode(GROUPING(s.CUSTOMER_ID),1,'ALL CUSTOMERS',s.CUSTOMER_ID) CUST_ID,
s.QUANTITY,
decode(GROUPING(b.BRAND_NAME),1,'ALL BRANDS',b.BRAND_NAME) BRAND,
b.MODEL_NAME,
s.TOTAL_PRICE
from SA_SALES.SA_SALES s, SA_BIKES.SA_BIKES b
where s.BIKE_ID = b.BIKE_ID 
group by  EXTRACT(MONTH FROM s.EVENT_DT),EXTRACT(DAY FROM s.EVENT_DT),
EXTRACT(YEAR FROM s.EVENT_DT),s.QUANTITY,
getQuarter(EVENT_DT),s.TOTAL_PRICE, b.MODEL_NAME, ROLLUP(b.BRAND_NAME,s.CUSTOMER_ID)
,ROLLUP(EXTRACT(YEAR FROM s.EVENT_DT),EXTRACT(MONTH FROM s.EVENT_DT),getQuarter(s.EVENT_DT),EXTRACT(DAY FROM s.EVENT_DT)) 
HAVING GROUPING_ID(s.CUSTOMER_ID,b.BRAND_NAME)+1 IN(:n_all_data,:n_customer,:n_brand,:n_summary)
ORDER BY  EXTRACT(YEAR FROM s.EVENT_DT),EXTRACT(MONTH FROM s.EVENT_DT),getQuarter(s.EVENT_DT),EXTRACT(DAY FROM s.EVENT_DT);


